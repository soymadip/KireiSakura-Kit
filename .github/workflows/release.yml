name: Release on Version Change

on:
  push:
    paths:
      - ".version"
  workflow_dispatch:
    inputs:
      version:
        description: "Enter a custom version (leave empty to use .version file)"
        required: false

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read version
        id: get_version
        run: |
          if [[ -n "${{ inputs.version }}" ]]; then
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=$(cat .version)" >> $GITHUB_ENV
          fi

      - name: Determine if it's a pre-release
        id: pre_release_check
        run: |
          if [[ "${{ env.VERSION }}" == 0* ]]; then
            echo "RELEASE_NAME=${{ env.VERSION }}-beta" >> $GITHUB_ENV
          else
            echo "RELEASE_NAME=${{ env.VERSION }}" >> $GITHUB_ENV
          fi

      - name: Get repository name
        id: get_repo_name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_ENV

      - name: Create a tar.gz archive
        run: |
          mkdir release
          rsync -av --progress . ./release \
                --exclude=".git"\
                --exclude=".github"\
                --exclude=".editorconfig"\
                --exclude=".prettierignore"\
                --exclude=".vscode"\
                --exclude="TODO.md"\
                --exclude="README.md"\
                --exclude="Assets"\
                --exclude="docs"
          tar -czvf ./${{ env.REPO_NAME }}.tar.gz -C release .

      - name: Generate changelog from commits
        id: generate_changelog
        run: |
          CHANGELOG=$(git log -1 --pretty=%B | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
          echo "CHANGELOG=${CHANGELOG}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.RELEASE_NAME }}
          body: "${{ env.CHANGELOG }}"
          prerelease: false
          files: "${{ env.REPO_NAME }}.tar.gz"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitHub CLI
        run: sudo apt update && sudo apt install -y gh

      - name: Update release with changelog
        run: |
          gh release edit ${{ env.VERSION }} --notes "$(echo -e "${{ env.CHANGELOG }}")"
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

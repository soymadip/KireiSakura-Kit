{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contributing/","title":"Contribute","text":"Help the development"},{"location":"contributing/#how-to-help-writing-docs","title":"How to help writing Docs?","text":"<ol> <li>Clone the repo.</li> <li>Browse the source code in starting from core dir.    Methods have comments showing how to use them (like args, flags, output etc..).</li> <li>Go to docs/docs dir.</li> <li>Write/Modify correct <code>.md</code> files.</li> <li>Submit pull request with the changes. Changes will be reviewed &amp; accepted.</li> </ol>"},{"location":"faq/","title":"FAQ","text":"Frequently Asked Questions"},{"location":"faq/#1-which-distros-are-supported","title":"1. Which distros are Supported?","text":"<ul> <li>Primarily on Arch.</li> <li> <p>Other major ones:- Debian, Ubuntu, fedora, OpenSuse Tumbleweed, Alpine Linux.</p> </li> <li> <p>Other distros should work but are not officially tested.Any fixes will be accepted.</p> </li> </ul>"},{"location":"faq/#2-when-will-stable-version-be-released","title":"2. When will stable version be released?","text":"<ul> <li>When all planned features for initial release will be completed.</li> </ul>"},{"location":"faq/#3-why-are-there-are-methods-for-one-line-commands","title":"3. Why are there are methods for one line commands?","text":"<ul> <li>Whole point of this framework is to simplify, beautify shell scripting. </li> <li>Even though some methods are basically one line command, they are hassle to write or getting correctly, having method drastically simplifies that.</li> </ul>"},{"location":"init/","title":"Initialization","text":"Initialization"},{"location":"init/#directory-structure","title":"Directory Structure","text":"<p>About this..</p> <ul> <li>The default structure is intended (&amp; recomended) to provide a clean structure &amp; followed by documentation.  </li> <li>Except modules dir, config file, you are free to organize your project however you like.<sup>1</sup></li> </ul> <pre><code>Project Root\n\u2502\n\u251c\u2500\u2500 main.sh\n\u251c\u2500\u2500 config.yml \n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 packages.sh\n\u2514\u2500\u2500 modules/\n    \u251c\u2500\u2500 Module1.sh\n    \u2514\u2500\u2500 Module2.sh\n</code></pre>"},{"location":"init/#1-mainsh","title":"1. <code>main.sh</code>","text":"<ul> <li>Location: Project Root</li> <li>Desc: </li> <li>This is entry point of the project.  </li> <li>This file holds all steps. initializing kit, importing modules, using methods, is done in this method.</li> </ul> Example main.sh <pre><code>#!/bin/bash\n\n# Init Kit\neval \"$(kireisakura -i)\"\n\n# Import modules\nkimport utils.os utils.font\n\n# list all installed fonts &amp; find one\nfont.list | grep \"jetbrains\"\n\n# Rest of the script\n</code></pre>"},{"location":"init/#3-configyml","title":"3. <code>config.yml</code>","text":"<ul> <li>Location: Project Root</li> <li>Desc:  This directory holds local modules. This directory is interpreted as <code>local</code> package within the kit.</li> </ul>"},{"location":"init/#3-modules-dir","title":"3. <code>modules</code> dir","text":"<ul> <li>Location: Project Root</li> <li>Desc:  This directory holds local modules. This directory is interpreted as <code>local</code> package within the kit.</li> </ul>"},{"location":"init/#4-src-dir","title":"4. <code>src</code> dir","text":"<ul> <li>Location: Project Root</li> <li>Desc: This directory is intended to hold resource files that are part of your project.</li> </ul> Example src/packages.sh packages.shmain.sh <pre><code>cli_pacakges=(\n    \"yazi\"\n    \"eza\"\n    \"htop\"\n)\n\ngui_packages=(\n    \"zen-browser\"\n    \"code-oss\"\n    \"mpv\"\n    \"redshift\"\n)\n</code></pre> <pre><code>#!/bin/env bash\nsource src/packages.sh\n\ninstall-package cli_packages gui_packages\n</code></pre>"},{"location":"init/#install-source-kit","title":"Install &amp; source Kit","text":"<p>Before everything</p> <ul> <li>Make sure you have <code>curl</code>, <code>grep</code>  installed.</li> <li>Optionally <code>figlet</code> too for the header.</li> </ul> <p>\u2139\ufe0f There are two ways to Install &amp; source the kit : -</p> Install &amp; Source directly within scriptOnly install in System <ul> <li>This one is recommended.</li> <li>Just execute your entry script, initialization will be done automatically.</li> <li>Suitable for portable scripts. (ex. in a dotfiles install script)</li> </ul> Add these lines at top of your script<pre><code>#!/bin/env bash\n\nif command -v kireisakura &amp;&gt; /dev/null; then\n  eval \"$(kireisakura --init)\"\nelse\n  clear -x\n  printf \"\\n&gt; Downloading KireiSakura-Kit\\n\"\n  curl -sSL https://kireisakura.soymadip.me/install | bash -s -ds\nfi\n</code></pre> <ul> <li>Installs the kit in your system but Doesn't source kit even if executed inside a script.</li> <li>Suitable if only needed to install.</li> </ul> Run this in terminal<pre><code>curl -L https://kireisakura.soymadip.me/install | bash -s\n</code></pre> <p></p>"},{"location":"init/#create-config-file","title":"Create config file","text":"<p>Create a file called <code>config.yml</code> in your project root.</p> <p>Add below lines with proper values : -</p> <pre><code>Project:\n    name: \"Your project name\"\n    owner: \"your name\"\n</code></pre> <ol> <li> <p>These can be customized too. See reference.\u00a0\u21a9</p> </li> </ol>"},{"location":"maintainance/","title":"Maintainance","text":"Docs|KireiSakura-Kit KireiSakura-Kit Site on Maintanance <p>[ We will be back soon ]</p>"},{"location":"roadmap/","title":"RoadMap","text":"RoadMap Stable ReleaseLater in Time <ul> <li> <p> Make <code>init.sh</code> in kit root for initialisation.</p> </li> <li> <p> Make setup command: <code>eval \"$(kireisakura --init)\"</code></p> </li> <li> <p> Make other commands:</p> <ul> <li> <code>kireisakura -h</code></li> <li> <code>kireisakura -v</code></li> <li> <code>kireisakura -d</code></li> <li> <code>kireisakura -i</code></li> <li> <code>kireisakura -u</code></li> </ul> </li> <li> <p> Make install script.</p> </li> <li> <p> Make a test script.</p> </li> <li> <p> Revamp project.</p> <ul> <li> Better directory structure.</li> <li> Clearer naming conventions.</li> <li> Make old Modules compatible.</li> </ul> </li> <li> <p> Implement Auto-Update.</p> </li> <li> <p> Config file support.</p> <ul> <li> Use <code>.sh</code> Yaml as format. </li> <li> Use YQ.</li> <li> Make config hiararchy.</li> <li> Allow customization, metadata input.</li> </ul> </li> <li> <p> Add support for packages.</p> <ul> <li> Add <code>kmp</code> command for managing package.</li> <li> Packages will reside in /packages dir.</li> <li> Allow changing package dir.</li> <li> move existing modules to <code>utils</code> package.</li> <li> Update <code>kimport</code> for importing plugin modules:<ul> <li> For single plugin module:     <code>packageName.moduleName</code></li> <li> For all module in a package:  <code>packageName</code></li> <li> For local module:              <code>.moduleName</code></li> <li> For all local module:          <code>.</code></li> </ul> </li> </ul> </li> <li> <p> Write documentation (help needed).</p> <ul> <li> Terms, Initialization, todo, faq.</li> <li> Config Options.</li> <li> Methods.</li> </ul> </li> <li> <p> Make a clearer Design guide.</p> <ul> <li>methods form packages should name with packageName.methodName</li> <li>The functons will print log with a tab at front.</li> <li>so users heading, then function's logs...</li> </ul> </li> </ul> <ul> <li> Swith to Docusaurus for documentation<ul> <li>mkdocs is excellent but is limited in some areas. </li> <li>Docusaurus will be more flexibile.</li> </ul> </li> <li> Check if core functions &amp; dependency functions are loaded and set that script load flag true using a variable.</li> <li> Make use of log file in more functions (for more detailed logs).</li> <li> Add more config options, make use of config file more.</li> <li> Add <code>-q</code> or <code>--quiet</code> flag to all possible functions.</li> <li> Enable completions (still thinking if useful):<ul> <li>Make script.</li> <li>Source the file.</li> <li>In install script: <code>printf \"echo \\\"fpath+=(\\\"${kirei_dir}/completions\\\")\\\" &gt;&gt; \\\"${zsh_rc}\\\"\"</code></li> </ul> </li> <li> Check for internet connection: <code>ping -c 2 soymadip.github.com &amp;&gt;/dev/null</code></li> <li> Make Package registry in separate branch.</li> <li> kpm will by default search package form here.</li> </ul>"},{"location":"trash/","title":"Trash","text":"<pre><code>declare -A INI_DATA  # Temporary global storage for ini.get\nEXPANSION_LIMIT=5    # Max recursion depth for variable expansion\n\n# Function: ini.read &lt;file&gt;\n# Reads an INI file and stores values in an associative array named after the exact filename.\nini.read() {\n    local file=\"$1\"\n    local file_var=\"${file//./_}\"\n    file_var=\"${file_var//\\//_}\"\n\n    declare -gA \"$file_var\"  # Define dynamic associative array\n\n    local awk_script='\n    BEGIN { FS = \"=\"; section = \"\" }\n    /^[[:space:]]*;/ { next }  # Skip comments (;)\n    /^[[:space:]]*#/ { next }  # Skip comments (#)\n    /^[[:space:]]*$/ { next }  # Skip empty lines\n\n    /^\\[[^]]+\\]/ {  # Match [section]\n        section = substr($0, 2, length($0) - 2);\n        next;\n    }\n\n    /^[^=]+=[^=]*$/ {  # Match key=value\n        key = $1; gsub(/^[ \\t]+|[ \\t]+$/, \"\", key);  # Trim spaces\n        value = $2; gsub(/^[ \\t]+|[ \\t]+$/, \"\", value);  # Trim spaces\n\n        # Store value with section prefix\n        full_key = section \".\" key;\n        ini_data[full_key] = value;\n    }\n\n    END {\n        for (k in ini_data) {\n            print k \" \" ini_data[k];  # Output parsed data\n        }\n    }\n    '\n\n    # Read INI file using awk and populate the dynamic array\n    while IFS= read -r line; do\n        key=\"${line%% *}\"  # Extract key (before space)\n        value=\"${line#* }\"  # Extract value (after space)\n        eval \"${file_var}[$key]=\\\"$value\\\"\"  # Store value without expansion\n    done &lt; &lt;(awk \"$awk_script\" \"$file\")\n}\n\n# Function: ini.get &lt;file&gt; &lt;section.key&gt;\n# Retrieves a value from the INI file without creating an array.\nini.get() {\n    local file=\"$1\"\n    local key=\"$2\"\n\n    local awk_script='\n    BEGIN { FS = \"=\"; section = \"\" }\n    /^[[:space:]]*;/ { next }  # Skip comments (;)\n    /^[[:space:]]*#/ { next }  # Skip comments (#)\n    /^[[:space:]]*$/ { next }  # Skip empty lines\n\n    /^\\[[^]]+\\]/ {  # Match [section]\n        section = substr($0, 2, length($0) - 2);\n        next;\n    }\n\n    /^[^=]+=[^=]*$/ {  # Match key=value\n        k = $1; gsub(/^[ \\t]+|[ \\t]+$/, \"\", k);\n        v = $2; gsub(/^[ \\t]+|[ \\t]+$/, \"\", v);\n\n        if (section \".\" k == target_key) {\n            print v;\n            exit;\n        }\n    }\n    '\n\n    local raw_value\n    raw_value=$(awk -v target_key=\"$key\" \"$awk_script\" \"$file\")\n\n    echo \"$raw_value\"  # Return value without expansion\n}\n\n\n\n#\n#\n#---------------------------------------------------------------------------------\n# NAME:  ini.expand\n# DESC:  Expand the function to support variable expansion.\n# FIXME: line 103: database.host: syntax error: invalid arithmetic operator (error token is \".host\")\n#---------------------------------------------------------------------------------\n\nini.expand() {\n    local file_var=\"$1\"\n    local value=\"$2\"\n    local depth=\"${3:-0}\"\n\n    if (( depth &gt;= EXPANSION_LIMIT )); then\n        echo \"Error: Expansion limit reached for: $value\" &gt;&amp;2\n        echo \"$value\"\n        return\n    fi\n\n    local regex='\\$\\{([^}]+)\\}'\n    while [[ \"$value\" =~ $regex ]]; do\n        local var=\"${BASH_REMATCH[1]}\"\n        local replacement\n        # \ud83d\udd39 Use indirect expansion to safely reference the associative array\n        local key_ref=\"${file_var}[\\\"$var\\\"]\"\n        replacement=\"${!key_ref}\"\n\n        if [[ -n \"$replacement\" ]]; then\n            value=\"${value//\\$\\{$var\\}/$replacement}\"\n        else\n            break\n        fi\n    done\n\n    echo \"$value\"\n}\n</code></pre> <pre><code># Function to create aliases for all modules\nmake-alias() {\n  local module_name=$1\n  local alias_name=$2\n\n  # Check if the module is loaded\n  if [[ \" ${kirei_loaded_modules[@]} \" =~ \" ${module_name} \" ]]; then\n    # Create the alias\n    alias \"$alias_name\"=\"$module_name\"\n    # Disable the function name execute\n    unset -f \"$module_name\"\n    echo -e \"\\e[38;5;245m       -&gt; Alias $alias_name created for $module_name.\\e[0m\"\n  else\n    echo -e \"\\e[38;5;196m       -&gt; Module $module_name is not loaded.\\e[0m\"\n  fi\n}\n</code></pre>"},{"location":"api/","title":"API","text":"Using API"},{"location":"api/#overview","title":"Overview","text":"<p>KireiSakura-Kit provides a set of ways to interact with and leverage it's capabilities. This documentation will guide you through the available methods and their usage.</p>"},{"location":"api/#elements","title":"Elements","text":"<ul> <li>Super Variables</li> <li>Methods &amp; Modules</li> <li>Packages</li> <li>Loading Modules</li> </ul>"},{"location":"api/loading-modules/","title":"Loading Modules","text":"Loading Modules <p>By default, KireiSakura Kit only imports core modules.</p> <p>Modules are imported using the <code>kimport</code> method.</p>"},{"location":"api/loading-modules/#import-plugin-modules","title":"Import Plugin Modules","text":"<p>To import plugin modules:</p> <pre><code># import specific modules of a package.\nkimport packageName.ModuleName\nkimport utils.disk utils.shell\n\n# import all modules of a package\nkimport PackageName\nkimport utils\n</code></pre>"},{"location":"api/loading-modules/#import-local-modules","title":"Import Local Modules","text":"<p>To import local modules:</p> <pre><code># import local modules\nkimport ModuleName\nkimport module1 module2 module3\n\n# import all local modules\nkimport .\n</code></pre>"},{"location":"api/methods-modules/","title":"Methods & Modules","text":"Methods &amp; Modules"},{"location":"api/methods-modules/#methods","title":"Methods","text":"<p>Methods are the functions exposed by Modules. </p> <p>They are the primary API for interacting with KireiSakura-Kit.</p>"},{"location":"api/methods-modules/#modules","title":"Modules","text":"<p>Modules are shell scripts that store methods. Each module performs a specific task and can be sourced as needed.</p> <p>There are 3 types are modules : -</p>  Core Modules Plugin Modules Local Modules <p>These are essential components of KireiSakura-Kit, providing foundational functionality.</p> <ul> <li>Automatically loaded at startup.</li> <li>Cannot be modified or removed.</li> <li>Listed in loaded modules.</li> </ul> <p>Extend the functionality of the framework.  </p> <ul> <li>These are optional &amp; must be loaded manually.  </li> <li>Can be dependent on core modules.</li> <li>Contained in packages. See packages.</li> </ul> <p>Local modules allow users to write their own extensions within a project.  </p> <ul> <li>These work similarly to plugin modules but are project specific.</li> <li>Core &amp; plugin modules can be used to make these.</li> <li>This makes main entry script clean, separating methods.</li> </ul> <p>Create local modules by making a sub directory called <code>modules</code> within project root.</p> <pre><code>&lt;PROJECT_ROOT&gt;\n|\n|-modules/\n    |\n    |-module1.sh\n    |-module2.sh\n</code></pre>"},{"location":"api/packages/","title":"Packages","text":"Packages <p>Be carefull</p> <p>Packages are not yet fully implemented. They need more work.</p> <p>Packages are directories containing plugin modules.</p> <p>Packages allow to group related plugin modules &amp; enable easily sharing plugin modules as installable pack.</p>"},{"location":"api/packages/#structure-of-package","title":"Structure of package","text":"<pre><code>&lt;PACKAGE_ROOT | PACKAGE_NAME&gt;\n    |\n    |-module1.sh\n    |-module2.sh\n    |-mosule3.sh\n</code></pre> <ul> <li>The package dir name should be of desired name for the package. </li> <li>Version detection &amp; updating will be added later.</li> </ul>"},{"location":"api/packages/#import-package-modules","title":"Import package &amp; modules","text":"<p>To use a package, import modules of that package, we need to use <code>kimport</code> function.</p> <ul> <li>Like this: -</li> </ul> <pre><code>kimport package1.module2   # import module2 from packge1\nkimport package1           # import all modules from packge1\n\nkimport .module3           # import LOCAL module: module3 \nkimport .                  # import all local mosules.\n</code></pre> <p>Info</p> <ul> <li>The local modules directory, <code>modules</code> is also considered as a package named <code>local</code> but is not necessary to mention the package name. </li> <li><code>.module_name</code> is actually interprited as <code>local.module_name</code>.</li> </ul>"},{"location":"api/packages/#install-a-package","title":"Install a package","text":"<p>To install a package, we use <code>kpm</code> or KireiSakura Package Manager.</p> <pre><code>kpm install &lt;git_username&gt;/&lt;package_name&gt;\n</code></pre> <ul> <li>By default, kpm assumes the package is at github </li> <li>So the above is expressed as  <code>&lt;git_username&gt;/&lt;package_name&gt;@github.com</code> -&gt; <code>https://github.com/&lt;git_username&gt;/&lt;package_name&gt;</code></li> <li>To install from other sources: - </li> </ul> <pre><code>kpm install &lt;git_username&gt;/&lt;package_name&gt;@domain_name\n\n# to install a packge from gitlab:\nkpm install &lt;git_username&gt;/&lt;package_name&gt;@gitlab.com\n</code></pre>"},{"location":"api/packages/#list-all-packages","title":"List all packages","text":"<p>To list all installed packages, </p> <pre><code>kpm list\n</code></pre>"},{"location":"api/packages/#update-packages","title":"Update packages","text":"<p>To update all packages use: -</p> <pre><code>kpm update\n</code></pre>"},{"location":"api/packages/#uninstall-package","title":"Uninstall package","text":"<p>To uninstall a package use: - <pre><code>kpm remove &lt;package_name&gt;\n</code></pre></p> <p>Or to uninstall all packages: - <pre><code>kpm remove all\n</code></pre></p>"},{"location":"api/reference/","title":"Methods Reference","text":"Available Methods <p>Sorry</p> <p> Methods are not yet documented.</p>"},{"location":"api/super-vars/","title":"Super Variables","text":"Super Variables <ul> <li>KireiSakura-Kit defines several key environment variables, known as Super Variables, which store important paths and project-related information.  </li> <li>These variables can be used like other variables to get many useful values.</li> </ul> <p>Here is an example of getting values of Super Variables</p> <pre><code># Print a value of a Super Variable (here, Documentation site url)\nlog.info $Kirei_docs_url\n\n# make a temporary directory in cache dir\nmkdir $kirei_cache_dir/temparary_dir\n</code></pre>"},{"location":"api/super-vars/#list-of-super-variables","title":"List of Super variables","text":""},{"location":"api/super-vars/#1-project-metadata","title":"1. Project &amp; Metadata","text":"<ul> <li><code>kirei_docs_url</code>         \u2192 URL to the official documentation.  </li> <li><code>k_project_name</code>     \u2192 Name of the project.  </li> <li><code>kirei_kit_version</code>      \u2192 Version of the currently installed kit.  </li> </ul>"},{"location":"api/super-vars/#2-core-directories","title":"2. Core Directories","text":"<ul> <li><code>kirei_dir</code>              \u2192 Root directory of KireiSakura-Kit.  </li> <li><code>kirei_core_dir</code>         \u2192 Directory containing core scripts.  </li> <li><code>kirei_loader</code>           \u2192 Path to the main entry script.  </li> <li><code>kirei_module_dir</code>       \u2192 Directory containing additional modules.  </li> <li><code>kirei_assets_dir</code>       \u2192 Directory for assets like icons and themes.  </li> </ul>"},{"location":"api/super-vars/#3-runtime-logging","title":"3. Runtime &amp; Logging","text":"<ul> <li><code>kirei_cache_dir</code>        \u2192 Directory for caching temporary files.  </li> <li><code>kirei_log_file</code>         \u2192 Path to the log file for debugging and tracking.  </li> <li><code>kirei_loaded_modules</code>   \u2192 Array containing list of loaded modules.  </li> </ul>"},{"location":"config/","title":"Configuration","text":"Configuration File <p>Configuration system is not yet implemented</p> <p>You can customize or override the default behavior of KireiSakura-Kit using configuration files.</p>"},{"location":"config/#configuration-files","title":"Configuration Files","text":"<p>KireiSakura-Kit supports two levels of configuration : -</p> Global Project Specific <ul> <li>Applies to all projects, overriding default settings.</li> <li>Primary Location: <code>$XDG_CONFIG_HOME/kireisakura-kit/config.yml</code></li> <li>Fallback Location: <code>~/.config/kireisakura-kit/config.yml</code> (used if <code>$XDG_CONFIG_HOME</code> is not set)</li> </ul> <ul> <li>Applies only to the current project.</li> <li>Has the highest priority, overriding both default &amp; global settings.</li> <li>Location: <code>&lt;project_root&gt;/config.yml</code></li> </ul> This config file's name can be changed! <p>What if we want to change the project config file's name? </p> <ul> <li>You can set a custom name using the global config option: <code>Project.config_file</code>.</li> </ul>"},{"location":"config/#loading-process","title":"Loading Process","text":"<ul> <li>The options set in config file overwrites their default values set by the Kit.  </li> <li>Options in Project config file overwrite global &amp; default values.</li> </ul> <pre><code>\ngraph TD\n    B{{Is XDG_CONFIG_HOME env variable set?}}\n    B -- Yes --&gt; C[Use&lt;br&gt;XDG_CONFIG_HOME/KireiSakura-Kit/config.yml]\n    B -- No --&gt; D[Use&lt;br&gt;$HOME/.config/KireiSakura-Kit/config.yml]\n    C --&gt; E[Load global config values.&lt;br&gt;Overwriting default values.]\n    D --&gt; E\n    E --&gt; F{{'config.toml' file present in current project root?}}\n    F -- Yes --&gt; G[Load project config values.&lt;br&gt;Overwrite global ones present in this.]\n    F -- No --&gt; H[Use global config values]\n    G --&gt; I[Use loaded config values]\n    H --&gt; I</code></pre>"},{"location":"config/example/","title":"Example config","text":"<pre><code>Project:\n  name: Dotfiles \n  owner: rahul\n  repo: rahul/Dotfiles\n  url: https://dotfiles.rahul.me\n  config_file: config.yml\n  module_dir: modules\n\nCustom:\n  kit_dir: \"${XDG_DATA_HOME:-$HOME/.local/share}/KireiSakura-Kit\"\n  cache_dir: \"${XDG_CACHE_HOME:-$HOME/.cache}/KireiSakura-Kit\"\n  package_dir: \n\nKit:\n  repo: Rahul/KireiSakura-Kit\n  branch: main\n\nOptions:\n  auto_update:\n  debug_mode:\n  silent_mode:\n  falisafe_mode: \n</code></pre> <pre><code># Declare Config variables\n\nproject_name=\"${configs[project_name]}\"\nproject_owner=\"${configs[project_owner]}\"\nproject_config_file=\"${configs[project_config_file]}\"\nlocal_module_dir=\"${configs[local_module_dir]}\"\nproject_repo=\"${configs[project_repo]}\"\n\nupstream_ver_url=\"${configs[upstream_ver_url]}\"\ninstaller_url=\"${configs[installer_url]}\"\ndocs_url=\"${configs[docs_url]}\"\n\nkit_dir=\"${configs[kit_dir]}\"\ncore_dir=\"${configs[core_dir]}\"\nloader_path=\"${configs[loader_path]}\"\npackage_dir=\"${configs[package_dir]}\"\nassets_dir=\"${configs[assets_dir]}\"\nkit_verison=\"${configs[kit_verison]}\"\n\ncache_dir=\"${configs[cache_dir]}\"\nlog_file_name=\"${configs[log_file_name]}\"\nlog_file=\"$cache_dir/$log_file_name\"\n</code></pre>"},{"location":"config/reference/","title":"Reference","text":"Configuration Options <p>This page details all available configuration options for KireiSakura-Kit.  </p> <p>Configuration follows YAML format.</p> <pre><code># example config.toml\n\nProject:\n  name: \"KireiSakura-Kit\"\n  author: soymadip\n\nOption:\n    debug_mode: false\n</code></pre> <p> Below are options, grouped by section : -</p>"},{"location":"config/reference/#project","title":"Project","text":""},{"location":"config/reference/#name","title":"name","text":"<p>Specifies the name of your project.  </p> <ul> <li>Type: string</li> <li>Optional: \u274c</li> <li>Default: <code>KireiSakura-Kit</code></li> </ul>"},{"location":"config/reference/#owner","title":"owner","text":"<p>Name of the maintainer of current project.</p> <ul> <li>Type: string</li> <li>Optional: \u274c</li> <li>Default: Null</li> </ul>"},{"location":"config/reference/#module_dir","title":"module_dir","text":"<p>Path of the directory that holds local modules, relative to the project root.</p> <ul> <li>Type: string/path</li> <li>Optional: \u2705</li> <li>Default: <code>modules/</code></li> </ul>"},{"location":"config/reference/#config_file","title":"config_file","text":"<p>Name or path of the project config file.  </p> <p> Name if config file is in the project root. Path, relative to project root if it's not in root.</p> <ul> <li>Type: String or path</li> <li>Optional: \u2705</li> <li>Default: config.toml</li> </ul> Example <p>Let's suppese project name is <code>Dotfile Heaven</code>.</p> <ol> <li> <p>Config file is in project root but only name is changed:-</p> <pre><code>Project:\n    name: \"Dotfile Heaven\"\n    config_file: \"kirei.roml\"\n</code></pre> </li> <li> <p>Config file is in <code>config</code> subdirectory &amp; is named <code>kirei.toml</code>. so:-</p> <pre><code>Project:\n    name: \"Dotfile Heaven\"\n    config_file: \"config/kirei.toml\"\n</code></pre> </li> </ol>"},{"location":"config/reference/#repo_url","title":"repo_url","text":"<p>Url of the current project's Repository/Website.</p> <ul> <li>Type: String/url</li> <li>Optional: \u2705</li> <li>Default: Null</li> </ul> <p></p>"},{"location":"config/reference/#custom","title":"Custom","text":""},{"location":"config/reference/#kit_dir","title":"kit_dir","text":"<p>Directory to use instead of default kit installation.</p> <ul> <li>Type: string/path</li> <li>Optional: \u2705</li> <li>Default:<code>$XDG_DATA_HOME/&lt;project_name&gt;</code></li> </ul>"},{"location":"config/reference/#cache_dir","title":"cache_dir","text":"<p>Defines the directory path where temporary files will be stored.</p> <ul> <li>Type: string/path</li> <li>Optional: \u2705</li> <li>Default: </li> <li>Primary: <code>$XDG_CONFIG_HOME/&lt;project name&gt;</code> (If <code>$XDG_CONFIG_HOME</code> is set)</li> <li>Fallback: <code>~/.config/&lt;project name&gt;</code></li> </ul>"},{"location":"config/reference/#log_file_name","title":"log_file_name","text":"<p>Specifies the name of the log file.  </p> <ul> <li>Type: string</li> <li>Optional: \u2705</li> <li>Default: <code>&lt;project_name&gt;.log</code></li> </ul>"},{"location":"config/reference/#installer_url","title":"installer_url","text":"<p>Direct URL to the installer script. This is used for installing/updating kit.  </p> <ul> <li>Type: string/url</li> <li>Optional: \u2705</li> <li>Default: <code>https://raw.githubusercontent.com/soymadip/KireiSakura-Kit/refs/heads/install/install.sh</code></li> </ul>"},{"location":"config/reference/#package_dir","title":"package_dir","text":"<p>Directory to use to hold installed packages.</p> <ul> <li>Type: string/path</li> <li>Optional: \u2705</li> <li>Default: <code>$kirei_dir/packages</code></li> </ul> <p></p>"},{"location":"config/reference/#kit","title":"Kit","text":""},{"location":"config/reference/#docs_url","title":"docs_url","text":"<p>Url of the Kit's documentation website.</p> <ul> <li>Type: string/url</li> <li>Optional: \u2705</li> <li>Default: https://soymadip.github.io/KireiSakura-Kit</li> </ul>"},{"location":"config/reference/#custom_repo","title":"custom_repo","text":"<p>Direct link to kit's installer script.</p> <ul> <li>Type: string/url</li> <li>Optional: \u2705</li> <li>Default: <code>https://raw.githubusercontent.com/soymadip/KireiSakura-Kit/refs/heads/install/install.sh</code></li> </ul>"},{"location":"config/reference/#upstream_ver_url","title":"upstream_ver_url","text":"<p>Direct download link of the file that holds the version number.</p> <ul> <li>Type: string/url</li> <li>Optional: \u2705</li> <li>Default: <code>https://raw.githubusercontent.com/soymadip/KireiSakura-Kit/main/.version</code></li> </ul> <p></p>"},{"location":"config/reference/#options","title":"Options","text":""},{"location":"config/reference/#auto_update","title":"auto_update","text":"<p>Should the Kit update everytime it's run?</p> <ul> <li>Type: bool</li> <li>Optional: \u2705</li> <li>Default: true</li> </ul>"},{"location":"config/reference/#debug_mode","title":"debug_mode","text":"<p>Enable Debug mode.</p> <p> In this mode, extra messages are printed (helpful for debugging).  </p> <ul> <li>Type: bool</li> <li>Optional: \u2705</li> <li>Default: false</li> </ul>"},{"location":"config/reference/#quiet_mode","title":"quiet_mode","text":"<p>Enable quiet mode.</p> <p> In this mode, most of the logs are supressed &amp; delays are removed.  </p> <ul> <li>Type: bool</li> <li>Optional: \u2705</li> <li>Default: flase</li> </ul>"},{"location":"config/reference/#failsafe_mode","title":"failsafe_mode","text":"<p>Enable failsafe mode.  </p> <p> Exit (stop execution of) script in case of error.</p> <ul> <li>Type: bool</li> <li>Optional: \u2705</li> <li>Default: false</li> </ul>"}]}
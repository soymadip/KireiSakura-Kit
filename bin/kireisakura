#!/usr/bin/env bash

# _    _          _ ____        _
#| | _(_)_ __ ___(_) ___|  __ _| | ___   _ _ __ __ _
#| |/ / | '__/ _ \ \___ \ / _` | |/ / | | | '__/ _` |
#|   <| | | |  __/ |___) | (_| |   <| |_| | | | (_| |
#|_|\_\_|_|  \___|_|____/ \__,_|_|\_\\__,_|_|  \__,_|
#
# Main executable script for KireiSakura-Kit

#_____________________________________FUNCTIONS_____________________________________________

# set -x

# Log function
logf() {
  local message="$1"
  local timestamp
  local formatted_message

  timestamp="[$(date '+%Y.%m.%d %H:%M:%S')] "

  # Replace '\n' with actual newlines
  formatted_message=$(echo -e "$message")

  while IFS= read -r line; do
    printf "%s %s\n" "$timestamp" "$line" >>"$log_file"
  done <<<"$formatted_message"
}

#

clearx() {
  if [[ "$(uname)" == "Darwin" ]]; then
    clear
  else
    clear -x
  fi
}

#

# For no arguments
show_man() {
  local opt=${1:-" "}

  if [ "$opt" != " " ]; then
    echo -e "\n  ${RED}Unknown flag: '$opt' ${NC}\n"
  else
    echo -e "\n  ${RED}No flag was given.${NC}\n"
  fi

  echo -e "  Use '${LAVENDER}kireisakura -h${NC}' for help."

  exit 1
}

# Help message
show_help() {

  echo -e "\n  Usage: ${LAVENDER}kireisakura {OPTIONS}${NC}"
  echo -e "  Usage: ${LAVENDER}eval '\$(kireisakura --init {OPTIONS})'${NC}\n"

  echo "  Options:"
  echo "      -i,  --init            Set up the KireiSakura-Kit."
  echo "      -d,  --dir <path>      Set up a custom installation. Must use with -i."
  echo "      -h,  --help            Show this help message and exit."
  echo "      -v,  --version         Show version and exit."
  echo "      -u,  --update          Update to newest version if available."
  echo "      -ul, --update-url      Upstream url. Direct link to '.version'."
  echo "      -t,  --test            Run the test script to verify the setup."

  exit 0
}

# version
get_version() {
  local url
  local version

  case "$1" in
  -u | --upstream)
    version=$(curl -s "$upstream_ver_url" || echo "N/A")
    ;;
  -l | --local)
    version=$(cat "$kit_ver_url" || echo "N/A")
    ;;
  *)
    version=$(cat "$kit_ver_url" || echo "N/A")
    ;;
  esac

  if [[ "$version" == "N/A" ]]; then
    return 1
  fi

  echo "$version"
  return 0 
}

show_version() {
  local version="$(get_version || echo "N/A")"

  if [[ "$version" == "N/A" ]]; then
    echo -e "  ${RED}Error: Unable to retrieve version.${NC}\n"
    exit 1
  else
    echo -e "\n  KireiSakura-Kit ${LAVENDER}v${version}${NC}\n"
    exit 0
  fi
}

compare_num() {
  local ver1
  local ver2
  local v1_part
  local v2_part

  if [[ $BASH_VERSION ]]; then
    IFS='.' read -r -a ver1 <<<"$1"
    IFS='.' read -r -a ver2 <<<"$2"
  else
    IFS='.' read -rA ver1 <<<"$1"
    IFS='.' read -rA ver2 <<<"$2"
  fi

  for i in {0..2}; do

    v1_part=${ver1[i]:-0}
    v2_part=${ver2[i]:-0}

    if ((v1_part > v2_part)); then
      echo 1
      return
    elif ((v1_part < v2_part)); then
      echo 2
      return
    fi
  done

  echo 0
  return 0
}

update_kit() {
  local result
  local upstream_version

  upstream_version="$(get_version || echo 0)"

  [[ "$upstream_version" == "0" ]] && echo -e " ${RED}Couldn't resolve upstream version. Please check your connection or the URL.${NC}" || k_upstream_ver="$upstream_version"

  result=$(compare_num "$kit_ver" "$upstream_version")

  if [ "$result" -eq 2 ]; then
    echo -e "\n  ${YELLOW}New update available:${NC} ${LAVENDER}v${verison} -> v${k_upstream_ver} ${NC}"
    echo -e " ${YELLOW}Updating....${NC}"
    curl -L "$kit_installer_url" | bash -s

  elif [[ $result -eq 0 ]]; then
    echo -e "\n  ${GREEN}No new update available.${NC}"
    echo -e "  KireiSakura-Kit ${LAVENDER}v${verison}${NC}"

  else
    echo -e "\n KireiSakura-Kit ${LAVENDER}v${verison}${NC}"
    echo -e " Local version is greater than Official release?"
    echo -e " Are you a dev?"
    echo -e " If not, please reinstall."
  fi
}

# Setup process
# TODO: make the header logo middle of the screen
init_kit() {
  local kit_version
  
  printf "\n\n" >>"$log_file"
  logf "====================== NEW SESSION =======================\n"
  logf "Started in: $(pwd)/"
  logf "Initialization started."

  printf "clear\n"
  printf "command -v figlet >/dev/null 2>&1 && figlet \"%s\" || cat \"\$K_ASSETS_DIR/header.txt\"\n" "$project_name"
  printf "echo -e '\\\n\\\n%s${BOLD_YELLOW}➤${NC}%s INIT: Starting Initialization...%s\\\n\\\n'\n" "$YELLOW" "$YELLOW" "$NC"

  [[ "$config_file" == "NULL" ]] || printf "echo -e '%s${BOLD_GREEN}✓${NC}%s Loaded Config file.%s'\n" "$GREEN" "$GREEN" "$NC"
  printf "sleep 1\n"

  # Check if kit exists
  if [ "$is_cstm_kit_dir" = true ]; then

    logf "Custom Kit directory given."
    printf "echo -e '%s${BOLD_YELLOW}⚠${NC}%s Custom Kit directory given.%s\n'" "$YELLOW" "$YELLOW" "$NC"
    printf "echo -e '%s${BOLD_YELLOW}⚠${NC}%s Checking it...%s\n'" "$YELLOW" "$YELLOW" "$NC"
  else
    logf "Using default Kit installation."
    printf "echo -e \"%s${BOLD_YELLOW}⚠${NC}%s Using default Kit installation.%s\"\n" "$YELLOW" "$YELLOW" "$NC"
    printf "echo -e '%s${BOLD_YELLOW}⚠${NC}%s Validating...%s'\n" "$YELLOW" "$YELLOW" "$NC"
  fi

  if [ ! -d "$kit_dir" ]; then
    if [ "$is_cstm_kit_dir" = true ]; then
      logf "Error: given custom kit dir is not valid."
      printf "echo -e '%s${BOLD_RED}✗${NC}%s Error: Custom Kit directory does not exist. Please check given directory path.%s\n'" "$RED" "$RED" "$NC"
      printf "echo -e '%s${BOLD_RED}✗${NC}%s Exiting...%s\n'" "$RED" "$RED" "$NC"
      exit 1
    else
      logf "Error: Default installation is missing"
      printf "echo -e '%s${BOLD_RED}✗${NC}%s Error: Default installation is missing. Please re-install the kit.%s\n'" "$RED" "$RED" "$NC"
      printf "echo -e '%s${BOLD_RED}✗${NC}%s Exiting...%s\n'" "$RED" "$RED" "$NC"
      exit 1
    fi
  else
    if [ "$is_cstm_kit_dir" = true ]; then
      logf "Custom kit dir exists."
      printf "echo -e '%s${BOLD_GREEN}✓${NC}%s Custom Kit directory exists.%s'\n" "$GREEN" "$GREEN" "$NC"
    else
      printf "echo -e '%s${BOLD_GREEN}✓${NC}%s Validated default installation.%s'\n" "$GREEN" "$GREEN" "$NC"
      echo
    fi
  fi

  # Check if core file exists
  if [ ! -f "$init_file" ]; then
    logf "Error: Init file is missing in kit."
    printf "echo -e '%s${BOLD_RED}✗${NC}%s Error: Init file is missing in Kit. Please check installation or re-install.%s\n'" "$RED" "$RED" "$NC"
    printf "echo -e 'Exiting.....' \n"
    exit 1
  fi


  # Output SUPER variables (constants)
  printf "K_KIT_NAME=\"%s\"\n"           "$kit_name"
  printf "K_KIT_OWNER=\"%s\"\n"          "$kit_owner"
  printf "K_KIT_SITE=\"%s\"\n"           "$kit_site"
  printf "K_KIT_REPO=\"%s\"\n"           "$kit_repo"
  printf "K_KIT_BRANCH=\"%s\"\n"         "$kit_repo_branch"
  printf "K_KIT_INSTALLER_URL=\"%s\"\n"  "$kit_installer_url"

  printf "K_KIT_DIR=\"%s\"\n"         "$kit_dir"
  printf "K_LIB_DIR=\"%s\"\n"         "$lib_dir"
  printf "K_INIT_FILE=\"%s\"\n"       "$init_file"
  printf "K_PACKAGE_DIR=\"%s\"\n"     "$package_dir"
  printf "K_ASSETS_DIR=\"%s\"\n"      "$assets_dir"

  printf "K_PRJ_NAME=\"%s\"\n"        "$project_name"
  printf "K_PRJ_OWNER=\"%s\"\n"       "$project_owner"
  printf "K_PRJ_URL=\"%s\"\n"         "$project_url"
  printf "K_PRJ_REPO=\"%s\"\n"        "$project_repo"
  printf "K_PRJ_CONFIG=\"%s\"\n"      "$project_config_file"

  printf "K_CACHE_DIR=\"%s\"\n"       "$cache_dir"
  printf "K_LOG_FILE=\"%s\"\n"        "$log_file"

  printf "K_KIT_VER_URL=\"%s\"\n"            "$kit_ver_url"
  printf "K_KIT_UPSTREAM_VER_URL=\"%s\"\n"   "$upstream_ver_url"
  printf "K_KIT_VERSION=\"%s\"\n"            "$(get_version)"
  printf "K_KIT_UPSTREAM_VERSION=\"%s\"\n"   "$(get_version -u)"
  printf "K_DEBUG_MODE=%s\n"                 "$debug_mode"

  # Print source and check_dir commands
  printf "\nsleep 1\n"
  logf "Loading init file....."
  printf "echo -e \"%s${BOLD_YELLOW}⚠${NC}%s Loading init file...%s\" \n" "$YELLOW" "$YELLOW" "$NC"
  printf "source \"\$K_INIT_FILE\" \n"
  printf "log.success 'Init file loaded successfully.' \n"
  logf "Loaded init file."

  printf "sleep 1\n"
  printf "log.warn \"Checking cache directory...\"\n"
  printf "check-dir \"\${K_CACHE_DIR}\" --needed\n"
  printf "log.success \"Cache directory verified.\"\n"
  printf "echo \n"
  printf "log \"KireiSakura-Kit v%s\"  \n" "$(get_version)"
  printf "sleep 1\n"
  printf "echo \" \\n \" \n"
  printf "log.success \"Initialization completed successfully.\" INIT\n"
  logf "Initialization complete."
  exit 0
}

run_tester() {
  echo -e "\n${LAVENDER}================= KireiSakura Kit Test Utility ==================${NC}\n"

  if bash "$lib_dir/_test.sh"; then
    echo -e "\n\n${GREEN}================ TEST SUCCESSFULLY COMPLETED ==================${NC}\n"
    exit 0
  else
    echo -e "\n\n${RED}================== TEST FAILED ==================${NC}\n"
    exit 1
  fi
}

#_________________________________ Default Configuration Values __________________________________________

# Super variables
kit_name="KireiSakura-Kit"                 # K_KIT_NAME
kit_owner="soymadip"                       # K_KIT_OWNER
kit_site="https://kireisakura.soymadip.me" # K_KIT_SITE
kit_repo="${kit_owner}/${kit_name}"        # K_KIT_REPO
kit_repo_branch="main"                     # K_KIT_BRANCH

kit_dir="$HOME/.local/share/${kit_name}"   # K_KIT_DIR
lib_dir="$kit_dir/lib"                     # K_LIB_DIR
init_file="$lib_dir/__init__.sh"           # K_INIT_FILE
package_dir="$kit_dir/packages"            # K_PACKAGE_DIR
assets_dir="$kit_dir/Assets"               # K_ASSETS_DIR

kit_installer_url="${kit_site}/install"    # K_KIT_INSTALLER_URL
kit_ver_url="$kit_dir/.version"            # K_KIT_VER_URL
upstream_ver_url="$kit_site/version"       # K_KIT_UPSTREAM_VER_URL

project_name="$kit_name"                   # K_PRJ_NAME
project_owner="$kit_owner"                 # K_PRJ_OWNER
project_url="$kit_site"                    # K_PRJ_URL
project_repo="$kit_repo"                   # K_PRJ_REPO
project_config_file="config.yml"           # K_PRJ_CONFIG

debug_mode=false                           # K_DEBUG_MODE

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/${project_name}" # K_CACHE_DIR
log_file="${cache_dir}/${project_name}.log"                 # K_LOG_FILE


# ____________________________________ Main _________________________________________________

# source colors
eval "$("$(dirname "$0")/../lib/_colors.sh")"

# Parse option
while [[ "$#" -ge 0 ]]; do

  case "$1" in
  -h | --help)
    show_help
    ;;
  -u | --update)
    update_kit
    ;;
  -v | --version)
    show_version
    ;;
  -t | --test)
    run_tester
    ;;
  -i | --init)
    mkdir -p "$cache_dir"
    init_kit
    ;;
  *)
    show_man "$1"
    ;;
  esac
  shift
done

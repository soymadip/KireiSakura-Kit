#!/usr/bin/env bash

# _    _          _ ____        _
#| | _(_)_ __ ___(_) ___|  __ _| | ___   _ _ __ __ _
#| |/ / | '__/ _ \ \___ \ / _` | |/ / | | | '__/ _` |
#|   <| | | |  __/ |___) | (_| |   <| |_| | | | (_| |
#|_|\_\_|_|  \___|_|____/ \__,_|_|\_\\__,_|_|  \__,_|
#
# Main executable script for KireiSakura-Kit

#_____________________________________FUNCTIONS_____________________________________________

# set -x

# Log function
logf() {
  local message="$1"
  local timestamp
  local formatted_message

  timestamp="[$(date '+%Y.%m.%d %H:%M:%S')] "

  # Replace '\n' with actual newlines
  formatted_message=$(echo -e "$message")

  while IFS= read -r line; do
    printf "%s %s\n" "$timestamp" "$line" >>"$log_file"
  done <<<"$formatted_message"
}

#

clearx() {
  if [[ "$(uname)" == "Darwin" ]]; then
    clear
  else
    clear -x
  fi
}

#

# For no arguments
show_man() {
  local opt=${1:-" "}

  if [ "$opt" != " " ]; then
    echo -e "\n  ${RED}Unknown flag: '$opt' ${NC}\n"
  else
    echo -e "\n  ${RED}No flag was given.${NC}\n"
  fi

  echo -e "  Use '${LAVENDER}kireisakura -h${NC}' for help."

  exit 1
}

# Help message
show_help() {

  echo -e "\n  Usage: ${LAVENDER}kireisakura {OPTIONS}${NC}"
  echo -e "  Usage: ${LAVENDER}eval '\$(kireisakura --init {OPTIONS})'${NC}\n"

  echo "  Options:"
  echo "      -i,  --init            Set up the KireiSakura-Kit."
  echo "      -d,  --dir <path>      Set up a custom installation. Must use with -i."
  echo "      -h,  --help            Show this help message and exit."
  echo "      -v,  --version         Show version and exit."
  echo "      -u,  --update          Update to newest version if available."
  echo "      -ul, --update-url      Upstream url. Direct link to '.version'."
  echo "      -t,  --test            Run the test script to verify the setup."

  exit 0
}

# version
show_version() {

  echo -e "\n  KireiSakura-Kit ${LAVENDER}v${verison}${NC}\n"
}

compare_num() {
  local ver1
  local ver2
  local v1_part
  local v2_part

  if [[ $BASH_VERSION ]]; then
    IFS='.' read -r -a ver1 <<<"$1"
    IFS='.' read -r -a ver2 <<<"$2"
  else
    IFS='.' read -rA ver1 <<<"$1"
    IFS='.' read -rA ver2 <<<"$2"
  fi

  for i in {0..2}; do

    v1_part=${ver1[i]:-0}
    v2_part=${ver2[i]:-0}

    if ((v1_part > v2_part)); then
      echo 1
      return
    elif ((v1_part < v2_part)); then
      echo 2
      return
    fi
  done

  echo 0
  return 0
}

update_kit() {
  local result
  local upstream_version

  upstream_version="$(curl -sSL "$upstream_ver_url" || echo 0)"
  [[ "$upstream_version" == "0" ]] && echo -e " ${RED}Couldn't resolve upstream version. Please check your connection or the URL.${NC}" || k_upstream_ver="$upstream_version"

  result=$(compare_num "$kit_verison" "$k_upstream_ver")

  if [ "$result" -eq 2 ]; then
    echo -e "\n  ${YELLOW}New update available:${NC} ${LAVENDER}v${verison} -> v${k_upstream_ver} ${NC}"
    echo -e " ${YELLOW}Updating....${NC}"
    curl -L "$installer_url" | bash -s

  elif [[ $result -eq 0 ]]; then
    echo -e "\n  ${GREEN}No new update available.${NC}"
    echo -e "  KireiSakura-Kit ${LAVENDER}v${verison}${NC}"

  else
    echo -e "\n KireiSakura-Kit ${LAVENDER}v${verison}${NC}"
    echo -e " Local version is greater than Official release?"
    echo -e " Are you a dev?"
    echo -e " If not, please reinstall."
  fi
}

# Setup process
# TODO: make the header logo middle of the screen
init_kit() {
  local kit_version
  local header="$(cat $k_assets_dir/header.txt)"

  printf "\n\n" >>"$log_file"
  logf "====================== NEW SESSION =======================\n"
  logf "Started in: $(pwd)/"
  logf "Initialization started."

  printf "clear\n"
  printf "echo -e '%*s'\n" $(((${#header} + columns) / 2)) "$header"
  printf "echo -e '\\\n\\\n%s[ INIT ]-> Starting Initialization..%s\\\n\\\n'\n" "$YELLOW" "$NC"

  [[ "$config_file" == "NULL" ]] || printf "echo -e '%s[✔]-> Loaded Config file..%s'\n" "$GREEN" "$NC"
  printf "sleep 1\n"

  # Check if kit exists
  if [ "$is_cstm_kit_dir" = true ]; then

    logf "Custom Kit directory given."
    printf "echo -e '%s[!]-> Custom Kit directory given.%s\n'" "$YELLOW" "$NC"
    printf "echo -e '%s[!]-> Checking it....%s\n'" "$YELLOW" "$NC"
  else
    logf "Using default Kit installation."
    printf "echo -e \"%s[!]-> Using default Kit installation.%s\"\n" "$YELLOW" "$NC"
    printf "echo -e '%s[!]-> Validating....%s'\n" "$YELLOW" "$NC"
  fi

  if [ ! -d "$k_dir" ]; then
    if [ "$is_cstm_kit_dir" = true ]; then
      logf "Error: given custom kit dir is not valid."
      printf "echo -e '%s[X]-> Error: Custom Kit directory does not exist. Please check given directory path.%s\n'" "$RED" "$NC"
      printf "echo -e '%s[X]-> Exiting.....%s\n'" "$RED" "$NC"
      exit 1
    else
      logf "Error: Default installation is missing"
      printf "echo -e '%s[X]-> Error: Default installation is missing. Please re-install the kit.%s\n'" "$RED" "$NC"
      printf "echo -e '%s[X]-> Exiting.....%s\n'" "$RED" "$NC"
      exit 1
    fi
  else
    if [ "$is_cstm_kit_dir" = true ]; then
      logf "Custom kit dir exists."
      printf "echo -e '%s[✔]-> Custom Kit directory exists.%s'\n" "$GREEN" "$NC"
    else
      echo -e "echo -e \"${GREEN}[✔]-> Validated default installation.${NC}\""
      echo
    fi
  fi

  # Check if core file exists
  if [ ! -f "$k_loader" ]; then
    logf "Error: Core file is missing in kit."
    printf "echo -e '%s[X]-> Error: Core file is missing in Kit. Please check installation or re-install.%s\n'" "$RED" "$NC"
    printf "echo -e 'Exiting.....' \n"
    exit 1
  fi

  kit_version=$(cat "$k_dir"/.version)

  # Output SUPER variables
  printf "k_dir=\"%s\"\n" "$k_dir"
  printf "k_core_dir=\"%s\"\n" "$k_core_dir"
  printf "k_loader=\"%s\"\n" "$k_loader"
  printf "k_package_dir=\"%s\"\n" "$k_package_dir"
  printf "k_assets_dir=\"%s\"\n" "$k_assets_dir"
  printf "k_docs_url=\"%s\"\n" "$docs_url"

  printf "k_prj_name=\"%s\"\n" "$project_name"
  printf "k_cache_dir=\"%s\"\n" "$cache_dir"
  printf "k_log_file=\"%s\"\n" "$log_file"
  printf "k_kit_version=\"%s\"\n" "$kit_version"

  # Print source and check_dir commands
  printf "sleep 1\n"
  logf "Loading core....."
  printf "echo -e \"%s[!]-> Loading core.%s\" \n" "$YELLOW" "$NC"
  printf "source \"\$k_loader\" \n"
  printf "log.success 'Loaded core.' \n"
  logf "Loaded core."

  # This was the issue part
  printf "sleep 1\n"
  printf "log.warn \"Checking cache directory.....\"\n"
  printf "check-dir \"\${k_cache_dir}\" --needed\n"
  printf "log.success \"Cache directory exists.\"\n"
  printf "echo "" \n"
  printf "log \"KireiSakura-Kit v%s\"  \n" "$kit_version"
  printf "sleep 1\n"
  printf "echo \" \\n \" \n"
  printf "log.success \"Initialization complete.\" INIT\n"
  logf "Initialization complete."
}

run_tester() {
  echo -e "\n${LAVENDER}================= KireiSakura Kit Test Utility ==================${NC}\n"

  if bash "$core_dir/_test.sh"; then
    echo -e "\n\n${GREEN}================ TEST SUCCESSFULLY COMPLETED ==================${NC}\n"
  else
    echo -e "\n\n${RED}================== TEST FAILED ==================${NC}\n"
  fi
}

#_________________________________ Default Configuration Values __________________________________________

# source colors
eval "$("$(dirname "$0")/../core/_colors.sh")"

# Define Super variables

kit_name="KireiSakura-Kit"                # k_kit_name
kit_owner="soymadip"                      # k_kit_owner
kit_url="https://kireisakura.soymadip.me" # k_kit_url
kit_repo="${kit_owner}/${kit_name}"       # k_kit_repo
kit_repo_branch="main"                    # k_kit_branch

project_name="$kit_name"         # k_prj_name
project_owner="$kit_owner"       # k_prj_owner
project_url="$kit_url"           # k_prj_url
project_repo="$kit_repo"         # k_prj_url
project_config_file="config.yml" # k_prj_config

kit_dir="$HOME/.local/share/${kit_name}" # k_kit_dir
core_dir="$kit_dir/core"                 # k_core_dir
loader_file="$core_dir/_loader.sh"       # k_loader
package_dir="$kit_dir/packages"          # k_package_dir
assets_dir="$kit_dir/Assets"             # k_package_dir
kit_ver="$(cat "$kit_dir"/.version)"     # k_kit_version

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/${project_name}" # k_cache_dir
log_file="${cache_dir}/${project_name}.log"                 # k_cache_dir

upstream_ver_url="https://raw.githubusercontent.com/${kit_repo}/${kit_repo_branch}/.version"

#
# ____________________________________ Main _________________________________________________

# If no arguments
[ "$#" -eq 0 ] && show_man

# Parse option
while [[ "$#" -gt 0 ]]; do

  case "$1" in
  -h | --help)
    show_help
    ;;
  -u | --update)
    update_kit
    ;;
  -v | --version)
    show_version
    ;;
  -t | --test)
    run_tester
    ;;
  -i | --init)
    init_kit
    ;;
  *)
    show_man "$1"
    ;;
  esac
  shift
done
